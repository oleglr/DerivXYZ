/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/

// /*
//  * Devices breakpoints - TODO: define proper breakpoints
//  */
// @mixin breakpoints($val) {
//     $big-desktop: '(max-width: 1800px)';
//     $tab-land   : '(max-width: 1200px)';
//     $tab-port   : '(max-width: 900px)';
//     $phone-xl   : '(max-width: 599px)';
//     $phone-lg   : '(max-width: 480px)';

//     @if $val == big-desktop {
//         @media #{$big-desktop} {
//             @content;
//         }
//     }
//     @else if $val == tab-land {
//         @media #{$tab-land} {
//             @content;
//         }
//     }
//     @else if $val == tab-port {
//         @media #{$tab-port} {
//             @content;
//         }
//     }
//     @else if $val == phone-xl {
//         @media #{$phone-xl} {
//             @content;
//         }
//     }
//     @else if $val == phone-lg {
//         @media #{$phone-lg} {
//             @content;
//         }
//     }
// }

/*
 * SASS interpolation
 */
// Requires the calc-interpolation function which can also be used independently
@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {
    $a: ($max-value - $min-value) / ($max-screen - $min-screen);
    $b: $min-value - $a * $min-screen;

    $sign: '+';
    @if ($b < 0) {
        $sign: '-';
        $b: abs($b);
    }
    @return calc(#{$a*100}vw #{$sign} #{$b});
}

@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {
    & {
        @each $property in $properties {
            #{$property}: $min-value;
        }
        @media screen and (min-width: $min-screen) {
            @each $property in $properties {
                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);
            }
        }
        @media screen and (min-width: $max-screen) {
            @each $property in $properties {
                #{$property}: $max-value;
            }
        }
    }
}

/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
@function em($px, $base: $BASE_FONT_SIZE) {
    $list: ();
    @if length($px) != 1 {
        @for $i from 1 through length($px) {
            $val_em: (nth($px, $i) / $base) * 1em;
            $list: append($list, $val_em, space);
        }
        @return $list;
    }
    @else {
        @return ($px / $base) * 1em;
    }
}

/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {
    #{$property}: em($values, $font-size);
}

/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
@function generate-typefaces() {
    $typeface_list: ();
    @each $fontsize_name, $size in $FONT_SIZES {
        @each $textalign_name, $text_align in $TEXT_ALIGN {
            @each $color_name, $color in $FONT_COLORS {
                @each $fontweight_name, $weight in $FONT_WEIGHTS {
                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};
                    $val: ($size, $text_align, $weight, $color);
                    $typeface: ($key: $val);
                    $typeface_list: map-merge($typeface_list, $typeface);
                }
            }
        }
    }
    // @debug $typeface_list; /* uncomment to debug */
    @return $typeface_list;
}

/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
@mixin setTypeface($size, $align, $weight, $colour, $tt) {
    @if $size {
        font-size: $size;
    }
    @if $colour {
        color: $colour;
    }
    @if $weight {
        font-weight: $weight;
    }
    @if $tt {
        text-transform: $tt;
    }
    @if $align {
        text-align: $align;
    }
    @if $size == 1.6em {
        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');
    }
    @else if $size == 1.4em {
        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');
    }
    @else if $size == 1.2em {
        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');
    }
    @else {
        line-height: unset;
    }
}

/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
@mixin typeface($var, $tt: capitalize) {
    $typeface_config: map-get($map: $TYPEFACES_LIST, $key: $var);

    $size  : nth($typeface_config, 1); // font-size
    $align : nth($typeface_config, 2); // text-align
    $weight: nth($typeface_config, 3); // font-weight
    $color : nth($typeface_config, 4); // color
    @include setTypeface($size, $align, $weight, $color, $tt);
}

/*
 * Range Slider Thumb styling is set here
 */
@mixin thumbStyle() {
    appearance: none;
    width: 1em;
    height: 1em;
    border-radius: 100%;
    border: 0;
    cursor: pointer;
    transition: box-shadow 0.5s;
    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);
}

/*
 * SVG icons colors
 */
@mixin colorIcon($colors...) {
    @for $i from 1 through length($colors) {
        /* postcss-bem-linter: ignore */
        .color#{$i}-fill {
            fill: nth($colors, $i);
        }
        /* postcss-bem-linter: ignore */
        .color#{$i}-stroke {
            stroke: nth($colors, $i);
        }
    }
}

/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
@mixin createBarspinnerAnimation($count, $duration, $phase) {
    animation: sk-stretchdelay $duration infinite ease-in-out;

    @for $i from 1 through $count {
        &--#{$i} {
            animation-delay: -$duration + (($i - 1) * $phase);
        }
    }
}

/*
 * Implementation of themes
 * generate sets of themes keys object property (dark / light)
 * @param $themes - themes property
 * Usage example:
   @include themify($themes) { color: themed('background_color') }
 */
@mixin themify($themes) {
    @each $theme, $map in $themes {
        .theme--#{$theme} & {
            $theme-map: () !global;
            @each $key, $submap in $map {
                $value: map-get(map-get($themes, $theme), '#{$key}');
                $theme-map: map-merge($theme-map, ($key: $value)) !global;
            }
            @content;
            $theme-map: null !global;
        }
    }
}

/*
 * Generate typefaces key-value pair of themefy object
 * Should be inside themify mixins
 * Example:
   @include themify($themes) { border-color: 1px solid themed('background_color') }
 */
@function themed($key) {
    @return map-get($theme-map, $key);
}

/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
@mixin tooltipColor($color) {
    &:before {
        background: $color;
    }
    &:after, &[data-tooltip-pos=top]:after {
        border-top-color: $color;
    }
    &[data-tooltip-pos=right]:after {
        border-top-color: transparent;
        border-right-color: $color;
    }
    &[data-tooltip-pos=left]:after {
        border-top-color: transparent;
        border-left-color: $color;
    }
    &[data-tooltip-pos=bottom]:after {
        border-top-color: transparent;
        border-bottom-color: $color;
    }
}

/*
 * Themified Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
@mixin themifiedTooltipColor($color) {
    @include themify($themes) {
        &:before {
            background: themed($color);
        }
        &:after, &[data-tooltip-pos=top]:after {
            border-top-color: themed($color);
        }
        &[data-tooltip-pos=right]:after {
            border-top-color: transparent;
            border-right-color: themed($color);
        }
        &[data-tooltip-pos=left]:after {
            border-top-color: transparent;
            border-left-color: themed($color);
        }
        &[data-tooltip-pos=bottom]:after {
            border-top-color: transparent;
            border-bottom-color: themed($color);
        }
    }
}
